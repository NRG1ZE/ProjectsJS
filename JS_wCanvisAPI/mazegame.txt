ENDPOINT: 301

-------
Big challenges
-------
how to generate a maze?
a soulution
how are we going to draw the maze on screen?
html elements?
keyinput responses
how to detect win con?


-------
Breakdown
-------
generating a maze!
tree data structure
matter.js
|->can map key press
|->can detect collisions between diffrent shapes..
|->..and report them as events


-------
Matter JS Terminology
-------

World - obj that contains all of the diffrent 'things' in our matter app
Engine - reads current state of the world obj, then calculates changes in position of all the diffrent shapes
Runner - gets the engine processes an update, Render will take a look at all the diffrent shapes and show them on screen
Render - Whenever the engine processes an update, Render will take a look at all the diffrenet shapes and show them on screen 
Body - a shape that we are displaying. can be circle, rectangle,oval, etc


-------
Maze Building Algorithm
-------
Create a grid of cells
Pick a random starting cells
Step 1) For that cell, buld a randomly- ordered list of neighbors
Step 2) If a neighbor has been visted before, remove it from the list
Step 3) For each remaing neighbor, 'move' to it and remove the wall between those two cells
Step 4) Repeat at Step-1 for this new neighbor

Application/
grid-> 2d array
verticals = array of walls between columns
horizontals = array of walls between rows
arrays contains values: true(no wall) or false(is wall)
-------
Resources
-------
brm.io/matter-js